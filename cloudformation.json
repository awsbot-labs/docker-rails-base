{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "Creates a RubyOnRails application as an AutoScaled ECS cluster service.",
	"Parameters": {
		"AppName": {
			"Description": "Name of the application",
			"Default": "rails",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[-_ a-zA-Z0-9]*",
			"ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
		},
		"AppPort": {
			"Default": "80",
			"Description": "Port exposed on the instance for HTTP connections",
			"Type": "String"
		},
		"ASGTopic": {
			"Description": "Topic ARN for the autoscaling group notifications",
			"Type": "String"
		},
		"DNSDomain": {
			"Description": "DNS Name for the Application",
			"Default": "awsbot.com",
			"Type": "String"
		},
		"DockerImage": {
			"Description": "Docker image for the Application",
			"Default": "dcrbsltd/rails:latest",
			"Type": "String"
		},
		"KeyName": {
			"Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
			"Default": "default",
			"Type": "String",
			"MinLength": "1",
			"MaxLength": "64",
			"AllowedPattern": "[-_ a-zA-Z0-9]*",
			"ConstraintDescription": "can contain only alphanumeric characters, spaces, dashes and underscores."
		},
		"RailsEnv": {
			"Default": "production",
			"Description": "The Rails environment variable.",
			"Type": "String"
		},
		"SecretKeyBase": {
			"Description": "Secret Key base for rails app.",
			"Type": "String"
		},
		"SMTPAddress": {
			"Description": "SMTP address to send mail from e.g. smtp.gmail.com",
			"Type": "String"
		},
		"SMTPDomain": {
			"Description": "SMTP domain to send mail from e.g. gmail.com",
			"Type": "String"
		},
		"SMTPPassword": {
			"Description": "SMTP password.",
			"Type": "String",
			"NoEcho": "true"
		},
		"SMTPUsername": {
			"Description": "SMTP Username e.g. myname@gmail.com",
			"Type": "String",
			"NoEcho": "true"
		},
		"SSHLocation": {
			"Default": "0.0.0.0/0",
			"Description": " The IP address range that can be used to SSH to the EC2 instances",
			"Type": "String",
			"MinLength": "9",
			"MaxLength": "18",
			"AllowedPattern": "(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})\\.(\\d{1,3})/(\\d{1,2})",
			"ConstraintDescription": "must be a valid IP CIDR range of the form x.x.x.x/x."
		}
	},
	"Conditions": {
		"Is-EC2-VPC": {
			"Fn::Or": [{
				"Fn::Equals": [{
						"Ref": "AWS::Region"
					},
					"eu-central-1"
				]
			}, {
				"Fn::Equals": [{
						"Ref": "AWS::Region"
					},
					"cn-north-1"
				]
			}]
		},
		"Is-EC2-Classic": {
			"Fn::Not": [{
				"Condition": "Is-EC2-VPC"
			}]
		}
	},
	"Mappings": {
		"AWSRegion2AMI": {
			"us-east-1": {
				"ecs": "ami-8da458e6"
			},
			"us-west-2": {
				"ecs": "ami-db0306eb"
			},
			"eu-west-1": {
				"ecs": "ami-7948320e"
			},
			"ap-northeast-1": {
				"ecs": "ami-fa12b7fa"
			},
			"ap-southeast-2": {
				"ecs": "ami-014f353b"
			}
		}
	},
	"Resources": {
		"AutoScalingGroup": {
			"Type": "AWS::AutoScaling::AutoScalingGroup",
			"Properties": {
				"AvailabilityZones": {
					"Fn::GetAZs": ""
				},
				"LaunchConfigurationName": {
					"Ref": "AutoScalingLaunchConfig"
				},
				"LoadBalancerNames": [{
					"Ref": "ElasticLoadBalancer"
				}],
				"MinSize": "1",
				"MaxSize": "3",
				"DesiredCapacity": "1",
				"NotificationConfigurations": [{
					"TopicARN": {
						"Ref": "ASGTopic"
					},
					"NotificationTypes": [
						"autoscaling:EC2_INSTANCE_LAUNCH",
						"autoscaling:EC2_INSTANCE_LAUNCH_ERROR",
						"autoscaling:EC2_INSTANCE_TERMINATE",
						"autoscaling:EC2_INSTANCE_TERMINATE_ERROR"
					]
				}],
				"Tags": [{
					"Key": "Name",
					"Value": {
						"Fn::Join": [
							".", [{
								"Ref": "AppName"
							}, {
								"Ref": "DNSDomain"
							}]
						]
					},
					"PropagateAtLaunch": "true"
				}]
			}
		},
		"AutoScalingLaunchConfig": {
			"DependsOn": "ECSCluster",
			"Type": "AWS::AutoScaling::LaunchConfiguration",
			"Metadata": {
				"AWS::CloudFormation::Init": {
					"configSets": {
						"full_install": [
							"install_cfn"
						]
					},
					"install_cfn": {
						"files": {
							"/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[main]\n",
											"stack=", {
												"Ref": "AWS::StackId"
											},
											"\n",
											"region=", {
												"Ref": "AWS::Region"
											},
											"\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": [
										"", [
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.LaunchConfig.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/apitools/cfn-init/bin/cfn-init -v ",
											"         --stack ", {
												"Ref": "AWS::StackName"
											},
											"         --resource AutoScalingLaunchConfig ",
											"         --configsets full_install ",
											"         --region ", {
												"Ref": "AWS::Region"
											},
											"\n",
											"runas=root\n"
										]
									]
								}
							}
						},
						"services": {
							"sysvinit": {
								"cfn-hup": {
									"enabled": "true",
									"ensureRunning": "true",
									"files": [
										"/etc/cfn/cfn-hup.conf",
										"/etc/cfn/hooks.d/cfn-auto-reloader.conf"
									]
								}
							}
						}
					}
				}
			},
			"Properties": {
				"ImageId": {
					"Fn::FindInMap": [
						"AWSRegion2AMI", {
							"Ref": "AWS::Region"
						},
						"ecs"
					]
				},
				"InstanceType": "t2.micro",
				"IamInstanceProfile": {
					"Ref": "IamInstanceProfile"
				},
				"SecurityGroups": [{
					"Ref": "AutoScalingSecurityGroup"
				}],
				"KeyName": {
					"Ref": "KeyName"
				},
				"UserData": {
					"Fn::Base64": {
						"Fn::Join": [
							"", [
								"#!/bin/bash\n",
								"echo ECS_CLUSTER=", {
									"Ref": "ECSCluster"
								},
								" >> /etc/ecs/ecs.config\n",
								"yum install -y vim git aws-cli aws-cfn-bootstrap\n",
								"/opt/aws/apitools/cfn-init/bin/cfn-init -v ",
								"         --stack ", {
									"Ref": "AWS::StackId"
								},
								"         --resource AutoScalingLaunchConfig ",
								"         --configsets full_install ",
								"         --region ", {
									"Ref": "AWS::Region"
								},
								"\n",
								"/opt/aws/apitools/cfn-init/bin/cfn-signal -e $? ",
								"         --stack ", {
									"Ref": "AWS::StackId"
								},
								"         --resource AutoScalingGroup ",
								"         --region ", {
									"Ref": "AWS::Region"
								},
								"\n"
							]
						]
					}
				}
			}
		},
		"AutoScalingSecurityGroup": {
			"Type": "AWS::EC2::SecurityGroup",
			"Properties": {
				"GroupDescription": "Enable SSH access",
				"SecurityGroupIngress": [{
					"IpProtocol": "tcp",
					"FromPort": {
						"Ref": "AppPort"
					},
					"ToPort": {
						"Ref": "AppPort"
					},
					"SourceSecurityGroupOwnerId": {
						"Fn::GetAtt": [
							"ElasticLoadBalancer",
							"SourceSecurityGroup.OwnerAlias"
						]
					},
					"SourceSecurityGroupName": {
						"Fn::GetAtt": [
							"ElasticLoadBalancer",
							"SourceSecurityGroup.GroupName"
						]
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": "22",
					"ToPort": "22",
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				}, {
					"IpProtocol": "tcp",
					"FromPort": {
						"Ref": "AppPort"
					},
					"ToPort": {
						"Ref": "AppPort"
					},
					"CidrIp": {
						"Ref": "SSHLocation"
					}
				}]
			}
		},
    "BucketPolicy": {
        "Type": "AWS::S3::BucketPolicy",
        "Properties": {
            "PolicyDocument": {
                "Id": "S3BucketPolicy",
                "Statement": [
                    {
                        "Sid": "ReadAccess",
                        "Action": [
                            "s3:GetObject"
                        ],
                        "Effect": "Allow",
                        "Resource": {
                            "Fn::Join": [
                                "",
                                [
                                    "arn:aws:s3:::",
                                    {
                                        "Ref": "RootBucket"
                                    },
                                    "/*"
                                ]
                            ]
                        },
                        "Principal": {
                            "AWS": "*"
                        }
                    }
                ]
            },
            "Bucket": {
                "Ref": "RootBucket"
            }
        }
    },
		"EC2InstanceRole": {
			"Type": "AWS::IAM::Role",
			"Properties": {
				"AssumeRolePolicyDocument": {
					"Version": "2012-10-17",
					"Statement": [{
						"Effect": "Allow",
						"Principal": {
							"Service": [
								"ec2.amazonaws.com",
								"ecs.amazonaws.com"
							]
						},
						"Action": [
							"sts:AssumeRole"
						]
					}]
				},
				"Path": "/",
				"Policies": [{
					"PolicyName": "instance-role-policy",
					"PolicyDocument": {
						"Version": "2012-10-17",
						"Statement": [{
							"Effect": "Allow",
							"Action": [
								"elasticloadbalancing:Describe*",
								"elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
								"elasticloadbalancing:RegisterInstancesWithLoadBalancer",
								"ec2:Describe*",
								"ec2:AuthorizeSecurityGroupIngress",
								"ecs:CreateCluster",
								"ecs:DeregisterContainerInstance",
								"ecs:DiscoverPollEndpoint",
								"ecs:Poll",
								"ecs:RegisterContainerInstance",
								"ecs:Submit*"
							],
							"Resource": [
								"*"
							]
						}]
					}
				}]
			}
		},
		"ECSCluster": {
			"Type": "AWS::ECS::Cluster"
		},
		"ECSTaskDefinition": {
			"Type": "AWS::ECS::TaskDefinition",
			"Properties": {
				"ContainerDefinitions": [{
					"Name": "rails",
					"Image": {
						"Ref": "DockerImage"
					},
					"Essential": "true",
					"Cpu": "10",
					"Memory": "384",
					"Environment": [{
						"Name": "SMTP_USERNAME",
						"Value": {
							"Ref": "SMTPUsername"
						}
					}, {
						"Name": "SMTP_DOMAIN",
						"Value": {
							"Ref": "SMTPDomain"
						}
					}, {
						"Name": "SMTP_ADDRESS",
						"Value": {
							"Ref": "SMTPAddress"
						}
					}, {
						"Name": "SMTP_DOMAIN",
						"Value": {
							"Ref": "SMTPDomain"
						}
					}, {
						"Name": "SMTP_PASSWORD",
						"Value": {
							"Ref": "SMTPPassword"
						}
					}, {
						"Name": "RAILS_ENV",
						"Value": {
							"Ref": "RailsEnv"
						}
					}, {
						"Name": "SECRET_KEY_BASE",
						"Value": {
							"Ref": "RailsEnv"
						}
					}, {
						"Name": "RAILS_SERVE_STATIC_FILES",
						"Value": "true"
					}, {
						"Name": "HOST",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "AppName"
									},
									".", {
										"Ref": "DNSDomain"
									},
									"."
								]
							]
						}
					}, {
						"Name": "DEFAULT_URL_OPTIONS_HOST",
						"Value": {
							"Fn::Join": [
								"", [{
										"Ref": "AppName"
									},
									".", {
										"Ref": "DNSDomain"
									}
								]
							]
						}
					}],
					"PortMappings": [{
						"AppPort": {
							"Ref": "AppPort"
						},
						"HostPort": {
							"Ref": "AppPort"
						}
					}]
				}]
			}
		},
		"ECSServiceDefinition": {
			"DependsOn": "AutoScalingGroup",
			"Type": "AWS::ECS::Service",
			"Properties": {
				"Cluster": {
					"Ref": "ECSCluster"
				},
				"DesiredCount": "1",
				"LoadBalancers": [{
					"ContainerName": "rails",
					"AppPort": {
						"Ref": "AppPort"
					},
					"LoadBalancerName": {
						"Ref": "ElasticLoadBalancer"
					}
				}],
				"Role": {
					"Ref": "EC2InstanceRole"
				},
				"TaskDefinition": {
					"Ref": "ECSTaskDefinition"
				}
			}
		},
		"ElasticLoadBalancer": {
			"Type": "AWS::ElasticLoadBalancing::LoadBalancer",
			"Properties": {
				"LoadBalancerName": {
					"Ref": "AppName"
				},
				"AvailabilityZones": {
					"Fn::GetAZs": ""
				},
				"HealthCheck": {
					"HealthyThreshold": "2",
					"Interval": "6",
					"Target": {
						"Fn::Join": [
							"", [
								"HTTP:", {
									"Ref": "AppPort"
								},
								"/"
							]
						]
					},
					"Timeout": "3",
					"UnhealthyThreshold": "3"
				},
				"CrossZone": "true",
				"Listeners": [{
					"InstancePort": {
						"Ref": "AppPort"
					},
					"InstanceProtocol": "HTTP",
					"LoadBalancerPort": "80",
					"Protocol": "HTTP"
				}]
			}
		},
		"IamPolicy": {
			"Type": "AWS::IAM::Policy",
			"DependsOn": "EC2InstanceRole",
			"Properties": {
				"PolicyName": "ecs-iam-policy",
				"PolicyDocument": {
					"Statement": [{
						"Effect": "Allow",
						"Action": [
							"ecs:CreateCluster",
							"ecs:DeregisterContainerInstance",
							"ecs:DiscoverPollEndpoint",
							"ecs:Poll",
							"ecs:RegisterContainerInstance",
							"ecs:Submit*"
						],
						"Resource": "*"
					}]
				},
				"Roles": [{
					"Ref": "EC2InstanceRole"
				}]
			}
		},
		"IamInstanceProfile": {
			"Type": "AWS::IAM::InstanceProfile",
			"DependsOn": "EC2InstanceRole",
			"Properties": {
				"Roles": [{
					"Ref": "EC2InstanceRole"
				}]
			}
		},
		"RecordSetGroup": {
			"Type": "AWS::Route53::RecordSetGroup",
			"Properties": {
				"HostedZoneName": {
					"Fn::Join": [
						"", [{
								"Ref": "DNSDomain"
							},
							"."
						]
					]
				},
				"Comment": "Rails HTTP application",
				"RecordSets": [{
					"Name": {
						"Fn::Join": [
							"", [{
									"Ref": "AppName"
								},
								".", {
									"Ref": "DNSDomain"
								},
								"."
							]
						]
					},
					"Type": "A",
					"AliasTarget": {
						"DNSName": {
							"Fn::GetAtt": [
								"ElasticLoadBalancer",
								"DNSName"
							]
						},
						"EvaluateTargetHealth": "true",
						"HostedZoneId": {
							"Fn::GetAtt": [
								"ElasticLoadBalancer",
								"CanonicalHostedZoneNameID"
							]
						}
					}
				}]
			}
		},
    "S3Bucket": {
        "Type": "AWS::S3::Bucket",
        "Properties": {
            "AccessControl": "PublicRead",
            "BucketName": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Ref":"AppName"
                        },
                        ".",
                        {
                            "Ref": "DNSName"
                        }
                    ]
                ]
            },
            "VersioningConfiguration": {
                "Status": "Enabled"
            },
            "WebsiteConfiguration": {
                "IndexDocument": "index.html",
                "ErrorDocument": "index.html"
            },
            "Tags": [
                {
                    "Key": "Name",
                    "Value": {
                        "Fn::Join": [
                            "",
                            [
                                {
                                  "Ref":"AppName"
                                },
                                ".",
                                {
                                    "Ref": "DNSName"
                                }
                            ]
                        ]
                    }
                }
            ]
        }
    }
	},
	"Outputs": {
		"LoadbalancerEndpoint": {
			"Description": "The DNSName of the load balancer",
			"Value": {
				"Fn::GetAtt": [
					"ElasticLoadBalancer",
					"DNSName"
				]
			}
		}
	}
}